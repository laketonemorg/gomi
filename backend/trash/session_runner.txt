from flask import Flask, request, jsonify
from flask_cors import CORS  # 追加: CORSをインポート
import subprocess
import uuid

app = Flask(__name__)
CORS(app)  # 追加: CORSを全開放に設定

# セッションを保存する辞書
sessions = {}

@app.route('/start', methods=['POST'])
def start_session():
    """
    セッションを開始し、一意のセッションIDを生成します。
    生成されたセッションIDは、後続のコマンド実行リクエストで使用します。
    """
    # ユニークなセッションIDを生成
    session_id = str(uuid.uuid4())
    # セッションIDに紐づくsubprocessを作成し、sessions辞書に格納
    sessions[session_id] = subprocess.Popen(
        ['bash'], 
        stdin=subprocess.PIPE, 
        stdout=subprocess.PIPE, 
        stderr=subprocess.PIPE, 
        text=True, 
        bufsize=1,
        shell=True
    )
    # セッションIDをクライアントに返却
    return jsonify({'session_id': session_id})

@app.route('/run', methods=['POST'])
def run_command():
    """
    クライアントから送信されたコマンドを実行します。
    コマンドは、指定されたセッションIDに紐づくsubprocessで実行されます。
    """
    try:
        # クライアントから送信されたデータを取得
        data = request.get_json()
        session_id = data.get('session_id')
        command = data.get('command')
        
        # 入力値のバリデーション
        if not session_id or not command:
            return jsonify({'error': 'Session ID and command are required'}), 400
        
        # sessions辞書からセッションIDに紐づくsubprocessを取得
        session = sessions.get(session_id)
        if session:
            # subprocessにコマンドを書き込み
            session.stdin.write(command + "\n")
            session.stdin.flush()
            # subprocessからの出力を読み取り
            output = session.stdout.readline()
            # 出力をクライアントに返却
            return jsonify({'output': output.strip()})
        else:
            # セッションが存在しない場合はエラーメッセージを返却
            return jsonify({'error': 'Invalid session ID'}), 400
    except Exception as e:
        # 予期せぬエラーが発生した場合はエラーメッセージを返却
        return jsonify({'error': str(e)}), 500

@app.route('/end', methods=['POST'])
def end_session():
    """
    指定されたセッションIDに紐づくsubprocessを終了し、
    sessions辞書から該当するセッションを削除します。
    """
    try:
        # クライアントから送信されたデータを取得
        data = request.get_json()
        session_id = data.get('session_id')
        
        # 入力値のバリデーション
        if not session_id:
            return jsonify({'error': 'Session ID is required'}), 400
        
        # sessions辞書からセッションIDに紐づくsubprocessを取得し、削除
        session = sessions.pop(session_id, None)
        if session:
            # subprocessを終了
            session.terminate()
            # 終了メッセージをクライアントに返却
            return jsonify({'status': 'Session terminated'})
        else:
            # セッションが存在しない場合はエラーメッセージを返却
            return jsonify({'error': 'Invalid session ID'}), 400
    except Exception as e:
        # 予期せぬエラーが発生した場合はエラーメッセージを返却
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    # アプリケーションを実行（開発用サーバーを起動）
    app.run(port=5000)
